import {
  Box,
  Button,
  Container,
  Grid,
  MenuItem,
  Paper,
  Select,
  Slider,
  Typography,
} from "@mui/material";
import "./App.css";
import { useEffect, useState } from "react";
import { useSynthStore, VoicingType } from "./store/synthstore";
import { useAudioEngine } from "./useAudioEngine";

const noteFrequencies = {
  C4: 261.63,
  D4: 293.66,
  E4: 329.63,
  F4: 349.23,
  G4: 392.00,
  A4: 440.00,
  B4: 493.88,
  C5: 523.25,
};
// const keys = [
//   "keyC",
//   "keyD",
//   "keyE",
//   "keyF",
//   "keyG",
//   "keyA",
//   "keyB",
// ]

function App() {
  const { initializeAudioContext, noteHold, noteRelease } =
    useAudioEngine();
  const [isInitialized, setIsInitialized] = useState(false);
  const handleInitialize = () => {
    if (isInitialized) {
      return;
    }
    initializeAudioContext();
    setIsInitialized(true);
  };
  useEffect(() => {
    return;
  }, []);
  const {
    voicing,
    oscillators,
    filterCutoff,
    filterResonance,
    envAttack,
    envDecay,
    envSustain,
    envRelease,
    setVoicingType,
    setOscillatorType,
    setOscillatorGain,
    setFilterCutoff,
    setFilterResonance,
    setEnvAttack,
    setEnvDecay,
    setEnvRelease,
    setEnvSustain,
  } = useSynthStore();

  // useEffect(() => {
  //   document.addEventListener("keydown", (e) => {
  //     const key = keys.find((element) => element == e.code)
  //     if(key != null)
  //     {}
  //   })
  // }, [])
  return (
    <Container maxWidth="lg"> {/* 横幅を少し広げる */}
      <Paper sx={{ p: 3, mt: 2, mb: 4 }}> {/* 上下にマージン、内側にパディング */}
        <Typography variant="h4" gutterBottom sx={{ mb: 3 }}>
          Web Synthesizer
        </Typography>

        {/* --- Initialization & Voicing --- */}
        <Stack direction="row" spacing={2} sx={{ mb: 4 }} alignItems="center">
          {!isInitialized && (
            <Button variant="contained" onClick={handleInitialize}>
              Initialize Audio Engine
            </Button>
          )}
          {isInitialized && (
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel id="voicing-select-label">Voicing</InputLabel>
              <Select
                labelId="voicing-select-label"
                label="Voicing"
                value={voicing}
                onChange={(e) => setVoicingType(e.target.value as VoicingType)}
              >
                <MenuItem value="mono">Monophonic</MenuItem>
                <MenuItem value="poly">Polyphonic</MenuItem>
              </Select>
            </FormControl>
          )}
        </Stack>


        {isInitialized && (
          <>
            {/* --- Synth Control Section --- */}
            <Grid container spacing={4}> {/* セクション間のスペースを広げる */}
              {/* --- Oscillator Section --- */}
              <Grid item xs={12} md={5}> {/* 中画面以上で幅5/12 */}
                <Typography variant="h6" gutterBottom>Oscillators</Typography>
                <Stack spacing={3}> {/* 各オシレーターの間隔 */}
                  {oscillators.map((oscSettings, index) => (
                    <Paper key={oscSettings.id} variant="outlined" sx={{ p: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>Oscillator {index + 1}</Typography>
                      <Grid container spacing={2} alignItems="center">
                        <Grid item xs={6} sm={5}>
                          <FormControl fullWidth size="small">
                            <InputLabel id={`osc-type-label-${oscSettings.id}`}>Type</InputLabel>
                            <Select
                              labelId={`osc-type-label-${oscSettings.id}`}
                              label="Type"
                              value={oscSettings.type}
                              onChange={(e) =>
                                setOscillatorType(oscSettings.id, e.target.value as OscillatorType)
                              }
                            >
                              <MenuItem value="sine">Sine</MenuItem>
                              <MenuItem value="square">Square</MenuItem>
                              <MenuItem value="sawtooth">Sawtooth</MenuItem>
                              <MenuItem value="triangle">Triangle</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        <Grid item xs={6} sm={7}>
                           <Typography variant="caption" id={`osc-gain-label-${oscSettings.id}`}>Gain</Typography>
                            <Slider
                              min={0} max={1.0} step={0.01}
                              value={oscSettings.gain}
                              onChange={(_, value) => setOscillatorGain(oscSettings.id, value as number)}
                              valueLabelDisplay="auto"
                              size="small"
                              aria-labelledby={`osc-gain-label-${oscSettings.id}`}
                            />
                        </Grid>
                         {/* TODO: オシレーターのデチューンやオクターブ調整などもここに追加 */}
                      </Grid>
                    </Paper>
                  ))}
                   {/* TODO: オシレーター追加ボタン */}
                </Stack>
              </Grid>

              {/* --- Filter & ADSR Section --- */}
              <Grid item xs={12} md={7}> {/* 中画面以上で幅7/12 */}
                 <Grid container spacing={4}>
                    {/* --- Filter Section --- */}
                    <Grid item xs={12} sm={6}>
                      <Typography variant="h6" gutterBottom>Filter</Typography>
                      <Stack spacing={1}>
                        <Box>
                          <Typography variant="caption" id="filter-cutoff-label">Cutoff ({Math.round(filterCutoff)} Hz)</Typography>
                          <Slider
                            min={20} max={20000} // 対数スケールも検討
                            value={filterCutoff}
                            onChange={(_, newValue) => setFilterCutoff(newValue as number)}
                            valueLabelDisplay="auto"
                            aria-labelledby="filter-cutoff-label"
                            size="small"
                            // 対数スケール例 (MUI v5): scale={(value) => Math.log10(value)} or 自前で計算
                          />
                        </Box>
                        <Box>
                           <Typography variant="caption" id="filter-resonance-label">Resonance ({filterResonance.toFixed(1)})</Typography>
                          <Slider
                            min={0.0001} max={30} step={0.1} // 実用的な範囲に調整
                            value={filterResonance}
                            onChange={(_, newValue) => setFilterResonance(newValue as number)}
                             valueLabelDisplay="auto"
                            aria-labelledby="filter-resonance-label"
                             size="small"
                          />
                        </Box>
                      </Stack>
                    </Grid>

                    {/* --- Amp Envelope Section (ADSR) --- */}
                    <Grid item xs={12} sm={6}>
                      <Typography variant="h6" gutterBottom>Amp Envelope (ADSR)</Typography>
                      <Grid container spacing={1}>
                        <Grid item xs={6}><ADSRSlider label="Attack" value={envAttack} onChange={setEnvAttack} min={0.001} max={2} step={0.001} unit="s" /></Grid>
                        <Grid item xs={6}><ADSRSlider label="Decay" value={envDecay} onChange={setEnvDecay} min={0.001} max={2} step={0.001} unit="s" /></Grid>
                        <Grid item xs={6}><ADSRSlider label="Sustain" value={envSustain} onChange={setEnvSustain} min={0} max={1} step={0.01} unit="" /></Grid>
                        <Grid item xs={6}><ADSRSlider label="Release" value={envRelease} onChange={setEnvRelease} min={0.001} max={5} step={0.001} unit="s" /></Grid>
                      </Grid>
                    </Grid>
                </Grid>
              </Grid>
            </Grid>

            {/* --- Keyboard Section --- */}
            <Box sx={{ mt: 4 }}> {/* 上にスペース */}
              <Typography variant="h6" gutterBottom>Keyboard</Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}> {/* ボタン間の隙間 */}
                {Object.entries(keyboardLayout).map(([noteName, noteNumber]) => {
                  const isPressed = activeNotes.has(noteNumber);
                  return (
                    <Button
                      key={noteNumber}
                      variant={isPressed ? "contained" : "outlined"} // 押下中はcontainedに
                      size="small"
                      sx={{ minWidth: '40px', textTransform: 'none' }}
                      onMouseDown={() => handleNoteDown(noteNumber)}
                      onMouseUp={() => handleNoteUp(noteNumber)}
                      onMouseLeave={() => { // ボタンから離れたら離鍵扱い
                        if (isPressed) {
                           handleNoteUp(noteNumber);
                        }
                      }}
                      onTouchStart={(e) => { // タッチ対応
                        e.preventDefault(); // スクロール防止
                        handleNoteDown(noteNumber);
                      }}
                      onTouchEnd={(e) => {
                        e.preventDefault();
                        handleNoteUp(noteNumber);
                      }}
                    >
                      {noteName}
                    </Button>
                  );
                })}
              </Box>
               <Typography variant="caption" sx={{display: 'block', mt: 1}}>
                 (Or use your PC keyboard: A, W, S, E, D, F, T, G, Y, H, U, J, K...)
               </Typography>
            </Box>
          </>
        )}
      </Paper>
    </Container>
  );
}

export default App;
